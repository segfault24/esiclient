/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.evetech.esi;

import net.evetech.ApiException;
import net.evetech.esi.models.BadRequest;
import net.evetech.esi.models.ErrorLimited;
import net.evetech.esi.models.Forbidden;
import net.evetech.esi.models.GatewayTimeout;
import net.evetech.esi.models.GetAlliancesAllianceIdContacts200Ok;
import net.evetech.esi.models.GetAlliancesAllianceIdContactsLabels200Ok;
import net.evetech.esi.models.GetCharactersCharacterIdContacts200Ok;
import net.evetech.esi.models.GetCharactersCharacterIdContactsLabels200Ok;
import net.evetech.esi.models.GetCorporationsCorporationIdContacts200Ok;
import net.evetech.esi.models.GetCorporationsCorporationIdContactsLabels200Ok;
import net.evetech.esi.models.InternalServerError;
import net.evetech.esi.models.PostCharactersCharacterIdContactsError520;
import net.evetech.esi.models.ServiceUnavailable;
import net.evetech.esi.models.Unauthorized;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Ignore
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    
    /**
     * Delete contacts
     *
     * Bulk delete contacts  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCharactersCharacterIdContactsTest() throws ApiException {
        Integer characterId = null;
        List<Integer> contactIds = null;
        String datasource = null;
        String token = null;
        api.deleteCharactersCharacterIdContacts(characterId, contactIds, datasource, token);

        // TODO: test validations
    }
    
    /**
     * Get alliance contacts
     *
     * Return contacts of an alliance  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAlliancesAllianceIdContactsTest() throws ApiException {
        Integer allianceId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<GetAlliancesAllianceIdContacts200Ok> response = api.getAlliancesAllianceIdContacts(allianceId, datasource, ifNoneMatch, page, token);

        // TODO: test validations
    }
    
    /**
     * Get alliance contact labels
     *
     * Return custom labels for an alliance&#39;s contacts  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAlliancesAllianceIdContactsLabelsTest() throws ApiException {
        Integer allianceId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetAlliancesAllianceIdContactsLabels200Ok> response = api.getAlliancesAllianceIdContactsLabels(allianceId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    
    /**
     * Get contacts
     *
     * Return contacts of a character  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdContactsTest() throws ApiException {
        Integer characterId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<GetCharactersCharacterIdContacts200Ok> response = api.getCharactersCharacterIdContacts(characterId, datasource, ifNoneMatch, page, token);

        // TODO: test validations
    }
    
    /**
     * Get contact labels
     *
     * Return custom labels for a character&#39;s contacts  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdContactsLabelsTest() throws ApiException {
        Integer characterId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetCharactersCharacterIdContactsLabels200Ok> response = api.getCharactersCharacterIdContactsLabels(characterId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    
    /**
     * Get corporation contacts
     *
     * Return contacts of a corporation  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCorporationsCorporationIdContactsTest() throws ApiException {
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<GetCorporationsCorporationIdContacts200Ok> response = api.getCorporationsCorporationIdContacts(corporationId, datasource, ifNoneMatch, page, token);

        // TODO: test validations
    }
    
    /**
     * Get corporation contact labels
     *
     * Return custom labels for a corporation&#39;s contacts  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCorporationsCorporationIdContactsLabelsTest() throws ApiException {
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetCorporationsCorporationIdContactsLabels200Ok> response = api.getCorporationsCorporationIdContactsLabels(corporationId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    
    /**
     * Add contacts
     *
     * Bulk add contacts with same settings  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCharactersCharacterIdContactsTest() throws ApiException {
        Integer characterId = null;
        List<Integer> contactIds = null;
        Float standing = null;
        String datasource = null;
        List<Long> labelIds = null;
        String token = null;
        Boolean watched = null;
        List<Integer> response = api.postCharactersCharacterIdContacts(characterId, contactIds, standing, datasource, labelIds, token, watched);

        // TODO: test validations
    }
    
    /**
     * Edit contacts
     *
     * Bulk edit contacts with same settings  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putCharactersCharacterIdContactsTest() throws ApiException {
        Integer characterId = null;
        List<Integer> contactIds = null;
        Float standing = null;
        String datasource = null;
        List<Long> labelIds = null;
        String token = null;
        Boolean watched = null;
        api.putCharactersCharacterIdContacts(characterId, contactIds, standing, datasource, labelIds, token, watched);

        // TODO: test validations
    }
    
}
