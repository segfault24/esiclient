/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package is.ccp.tech.esi;

import is.ccp.tech.ApiException;
import is.ccp.tech.esi.models.BadGateway;
import is.ccp.tech.esi.models.BadRequest;
import is.ccp.tech.esi.models.DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity;
import is.ccp.tech.esi.models.ErrorLimited;
import is.ccp.tech.esi.models.Forbidden;
import is.ccp.tech.esi.models.GetCharactersCharacterIdMail200Ok;
import is.ccp.tech.esi.models.GetCharactersCharacterIdMailLabelsOk;
import is.ccp.tech.esi.models.GetCharactersCharacterIdMailLists200Ok;
import is.ccp.tech.esi.models.GetCharactersCharacterIdMailMailIdNotFound;
import is.ccp.tech.esi.models.GetCharactersCharacterIdMailMailIdOk;
import is.ccp.tech.esi.models.InternalServerError;
import is.ccp.tech.esi.models.PostCharactersCharacterIdMail520Response;
import is.ccp.tech.esi.models.PostCharactersCharacterIdMailLabelsLabel;
import is.ccp.tech.esi.models.PostCharactersCharacterIdMailMail;
import is.ccp.tech.esi.models.PutCharactersCharacterIdMailMailIdContents;
import is.ccp.tech.esi.models.ServiceUnavailable;
import is.ccp.tech.esi.models.Unauthorized;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MailApi
 */
@Ignore
public class MailApiTest {

    private final MailApi api = new MailApi();

    
    /**
     * Delete a mail label
     *
     * Delete a mail label  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCharactersCharacterIdMailLabelsLabelIdTest() throws ApiException {
        Integer characterId = null;
        Integer labelId = null;
        String datasource = null;
        String token = null;
        api.deleteCharactersCharacterIdMailLabelsLabelId(characterId, labelId, datasource, token);

        // TODO: test validations
    }
    
    /**
     * Delete a mail
     *
     * Delete a mail  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCharactersCharacterIdMailMailIdTest() throws ApiException {
        Integer characterId = null;
        Integer mailId = null;
        String datasource = null;
        String token = null;
        api.deleteCharactersCharacterIdMailMailId(characterId, mailId, datasource, token);

        // TODO: test validations
    }
    
    /**
     * Return mail headers
     *
     * Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  ---  This route is cached for up to 30 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdMailTest() throws ApiException {
        Integer characterId = null;
        String datasource = null;
        String ifNoneMatch = null;
        List<Integer> labels = null;
        Integer lastMailId = null;
        String token = null;
        List<GetCharactersCharacterIdMail200Ok> response = api.getCharactersCharacterIdMail(characterId, datasource, ifNoneMatch, labels, lastMailId, token);

        // TODO: test validations
    }
    
    /**
     * Get mail labels and unread counts
     *
     * Return a list of the users mail labels, unread counts for each label and a total unread count.  ---  This route is cached for up to 30 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdMailLabelsTest() throws ApiException {
        Integer characterId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        GetCharactersCharacterIdMailLabelsOk response = api.getCharactersCharacterIdMailLabels(characterId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    
    /**
     * Return mailing list subscriptions
     *
     * Return all mailing lists that the character is subscribed to  ---  This route is cached for up to 120 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdMailListsTest() throws ApiException {
        Integer characterId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetCharactersCharacterIdMailLists200Ok> response = api.getCharactersCharacterIdMailLists(characterId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    
    /**
     * Return a mail
     *
     * Return the contents of an EVE mail  ---  This route is cached for up to 30 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdMailMailIdTest() throws ApiException {
        Integer characterId = null;
        Integer mailId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        GetCharactersCharacterIdMailMailIdOk response = api.getCharactersCharacterIdMailMailId(characterId, mailId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    
    /**
     * Send a new mail
     *
     * Create and send a new mail  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCharactersCharacterIdMailTest() throws ApiException {
        Integer characterId = null;
        PostCharactersCharacterIdMailMail mail = null;
        String datasource = null;
        String token = null;
        Integer response = api.postCharactersCharacterIdMail(characterId, mail, datasource, token);

        // TODO: test validations
    }
    
    /**
     * Create a mail label
     *
     * Create a mail label  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCharactersCharacterIdMailLabelsTest() throws ApiException {
        Integer characterId = null;
        PostCharactersCharacterIdMailLabelsLabel label = null;
        String datasource = null;
        String token = null;
        Integer response = api.postCharactersCharacterIdMailLabels(characterId, label, datasource, token);

        // TODO: test validations
    }
    
    /**
     * Update metadata about a mail
     *
     * Update metadata about a mail  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putCharactersCharacterIdMailMailIdTest() throws ApiException {
        Integer characterId = null;
        PutCharactersCharacterIdMailMailIdContents contents = null;
        Integer mailId = null;
        String datasource = null;
        String token = null;
        api.putCharactersCharacterIdMailMailId(characterId, contents, mailId, datasource, token);

        // TODO: test validations
    }
    
}
